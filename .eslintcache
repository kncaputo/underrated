[{"/Users/karacaputo/turing/personal-projects/underrated/src/index.js":"1","/Users/karacaputo/turing/personal-projects/underrated/src/App/App.js":"2","/Users/karacaputo/turing/personal-projects/underrated/src/apiCalls.js":"3","/Users/karacaputo/turing/personal-projects/underrated/src/Header/Header.js":"4","/Users/karacaputo/turing/personal-projects/underrated/src/MovieGrid/MovieGrid.js":"5","/Users/karacaputo/turing/personal-projects/underrated/src/MovieDetails/MovieDetails.js":"6","/Users/karacaputo/turing/personal-projects/underrated/src/Banner/Banner.js":"7","/Users/karacaputo/turing/personal-projects/underrated/src/Search/Search.js":"8","/Users/karacaputo/turing/personal-projects/underrated/src/Watchlist/Watchlist.js":"9","/Users/karacaputo/turing/personal-projects/underrated/src/StarRating/StarRating.js":"10","/Users/karacaputo/turing/personal-projects/underrated/src/Login/Login.js":"11","/Users/karacaputo/turing/personal-projects/underrated/src/Poster/Poster.js":"12","/Users/karacaputo/turing/personal-projects/underrated/src/ListItem/ListItem.js":"13","/Users/karacaputo/turing/personal-projects/underrated/src/MovieTrailers/MovieTrailers.js":"14"},{"size":304,"mtime":1611679746723,"results":"15","hashOfConfig":"16"},{"size":6999,"mtime":1611679746708,"results":"17","hashOfConfig":"16"},{"size":2061,"mtime":1609694480079,"results":"18","hashOfConfig":"16"},{"size":1249,"mtime":1611679746712,"results":"19","hashOfConfig":"16"},{"size":531,"mtime":1611679746717,"results":"20","hashOfConfig":"16"},{"size":6720,"mtime":1611679746715,"results":"21","hashOfConfig":"16"},{"size":1595,"mtime":1611679746710,"results":"22","hashOfConfig":"16"},{"size":418,"mtime":1611679746720,"results":"23","hashOfConfig":"16"},{"size":219,"mtime":1611679746721,"results":"24","hashOfConfig":"16"},{"size":1248,"mtime":1609696258450,"results":"25","hashOfConfig":"16"},{"size":1628,"mtime":1611679746714,"results":"26","hashOfConfig":"16"},{"size":545,"mtime":1611679746718,"results":"27","hashOfConfig":"16"},{"size":392,"mtime":1611679746713,"results":"28","hashOfConfig":"16"},{"size":1484,"mtime":1611679746718,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"v6ck4e",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/karacaputo/turing/personal-projects/underrated/src/index.js",[],["63","64"],"/Users/karacaputo/turing/personal-projects/underrated/src/App/App.js",["65"],"import React, { Component } from 'react';\nimport Header from '../Header/Header';\nimport MovieGrid from '../MovieGrid/MovieGrid';\nimport MovieDetails from '../MovieDetails/MovieDetails';\nimport Search from '../Search/Search';\nimport Banner from '../Banner/Banner';\nimport Watchlist from '../Watchlist/Watchlist';\nimport { fetchMovies, fetchSingleMovie, postLoginCredentials } from '../apiCalls';\nimport { Route } from 'react-router-dom';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      error: '',\n      currentUser: null,\n      input: '',\n      dropdownValue: 'all',\n      ratingValue: 'any'\n    }\n  }\n  \n  componentDidMount = () => {\n    fetchMovies()\n    .then(allMovies => this.setState({ movies: allMovies.movies}))\n    .then(() => this.findMovieGenres())\n    .catch(error => this.setState({ error: error.message }))\n  }\n\n  findMovieGenres = () => {\n    this.state.movies.map(movie => {\n      fetchSingleMovie(movie.id)\n      .then(singleMovie => movie.genres = singleMovie.movie.genres)\n    })\n  }\n\n  validateLogin = (loginEmail, loginPassword) => {\n    const credentials = {\n      email: loginEmail,\n      password: loginPassword\n    }\n\n    postLoginCredentials(credentials)\n    .then(user => this.setState({ currentUser: user.user }))\n    .catch(error => this.setState({ error: error.message}))\n  }\n\n  clearError = () => {\n    this.setState({ error: '' })\n  }\n\n  signOut = () => {\n    this.setState({ currentUser: null })\n  }\n\n  get filterMoviesBySelection() {\n    const filterByGenre = this.state.movies.filter(movie => {\n      if (this.state.dropdownValue !== 'all' && movie.genres) {\n        return movie.genres.includes(this.state.dropdownValue)\n      } else {\n        return this.state.movies\n      }\n    })\n\n    const filterByRating = filterByGenre.filter(movie => {\n      if (this.state.ratingValue !== 'any') {\n        const roundedRating = parseInt(movie.average_rating)\n        return roundedRating === parseInt(this.state.ratingValue)\n      } else {\n        return filterByGenre\n      }\n    })\n\n    return filterByRating.filter(movie => {\n      return movie.title.toLowerCase().includes(this.state.input)\n    })\n  }\n\n  getUserInput = (inputValue) => {\n    this.setState({input: inputValue})\n  }\n\n  handleDropdownValue = (event) => {\n    this.setState({ dropdownValue: event.target.name})\n  }\n\n  handleRatingValue = (event) => {\n    this.setState({ ratingValue: event.target.value })\n  }\n\n  clearFilters = () => {\n    this.setState({ input: '', dropdownValue: 'all', ratingValue: 'any' })\n  }\n\n  generateGenreButtons = () => {\n    const genres = ['Adventure', 'Animation', 'Comedy', 'Crime', 'Drama', 'Family', 'Fantasy', 'History', 'Horror', 'Music', 'Romance', 'Science', 'Thriller', 'War', 'Western'];\n    \n    return genres.map(genre => {\n      return <button name={genre} className='dropdown-filter' onClick={(event) => this.handleDropdownValue(event)}>{genre.toLowerCase()}</button>\n    })\n  }\n\n  generateRatingsButtons = () => {\n    const ratings = [{name: 'one', value: 1}, {name: 'two', value: 2}, {name: 'three', value: 3}, {name: 'four', value: 4}, {name: 'five', value: 5}, \n    {name: 'six', value: 6}, {name: 'seven', value: 7}, {name: 'eight', value: 8}, {name: 'nine', value: 9}, {name: 'ten', value: 10}];\n    \n    return ratings.map(rating => {\n      return  <button name={rating.name} value={rating.value} className='dropdown-filter' onClick={(event) => this.handleRatingValue(event)}>{rating.name}</button>\n    })\n  }\n\n  generateFilterDropdown = () => {\n    return(\n      <section className='genre-filter'>\n        <section className='filter-title-box'>\n          <DropdownButton\n            title={`showing ${this.state.dropdownValue.toUpperCase()} movies`}\n            className='genre-dropdown'\n            id='filter-title-l'>\n            <button className='dropdown-filter' onClick={() => this.setState({ dropdownValue: 'all' })}>all</button>\n            {this.generateGenreButtons()}\n          </DropdownButton>\n        </section>\n        <section className='filter-title-box'>\n          <DropdownButton\n            title={`with ${this.state.ratingValue.toUpperCase()} rating`}\n            className='rating-dropdown'\n            id='filter-title-r'>\n            {this.generateRatingsButtons()}\n          </DropdownButton>\n        </section>\n        {(this.state.input !== '' || this.state.dropdownValue !== 'all' || this.state.ratingValue !== 'any') &&\n          <button className='clear' onClick={() => this.clearFilters()}>clear</button>\n        }\n      </section>\n    )\n  }\n\n  render() {\n    return(\n      <main>\n        <Header \n          currentUser={this.state.currentUser}\n          validateLogin={this.validateLogin}\n          error={this.state.error}\n          clearError={this.clearError}\n          signOut={this.signOut}\n        />\n        <Route \n          exact \n          path='/' \n          render={() => {\n            return (\n              <section>\n                <Banner />\n                <Search \n                  getUserInput={this.getUserInput} \n                  input={this.state.input}\n                />\n                {this.generateFilterDropdown()}\n                {/* <section className='genre-filter'>\n                  <p className='dropdown-text'>showing <span className='active-text'>{this.state.dropdownValue}</span> movies</p>\n                  <DropdownButton\n                    title=''\n                    className='genre-dropdown'\n                    id='dropdown-left'>\n                    <button className='dropdown-filter' onClick={() => this.setState({ dropdownValue: 'all' })}>all</button>\n                    {this.generateGenreButtons()}\n                  </DropdownButton>\n                  <p className='dropdown-text'>with <span className='active-text'>{this.state.ratingValue}</span> rating</p>\n                  <DropdownButton\n                    title=''\n                    className='rating-dropdown'>\n                    {this.generateRatingsButtons()}\n                  </DropdownButton>\n                  {(this.state.input !== '' || this.state.dropdownValue !== 'all' || this.state.ratingValue !== 'any') &&\n                    <button className='clear' onClick={() => this.clearFilters()}>clear</button>\n                  }\n                </section> */}\n                <MovieGrid\n                  movies={this.filterMoviesBySelection}  \n                />\n              </section>\n            )\n          }}\n        />\n        <Route \n          exact\n          path='/movie/:id'\n          render={( { match }) => {\n            return (\n              <MovieDetails \n                id={match.params.id}\n                currentUser={this.state.currentUser}\n             />)\n          }}\n        />\n        <Route\n          exact\n          path='/watchlist'\n          component={Watchlist}\n        />  \n      </main>\n    ) \n  }\n}\n\nexport default App;","/Users/karacaputo/turing/personal-projects/underrated/src/apiCalls.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/Header/Header.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/MovieGrid/MovieGrid.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/MovieDetails/MovieDetails.js",["66","67","68"],"import React, { Component } from \"react\";\nimport { fetchSingleMovie, fetchUserRatings, postUserRating, deleteUserRating } from \"../apiCalls\"; \nimport ListItem from \"../ListItem/ListItem\";\nimport MovieTrailers from \"../MovieTrailers/MovieTrailers\";\nimport StarRating from \"../StarRating/StarRating\";\nimport \"./MovieDetails.scss\";\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      singleMovie: {},\n      error: \"\",\n      currentUserRating: null,\n      onWatchlist: false\n    }\n  }\n  \n  componentDidMount() {\n    window.scrollTo(0, 0)\n    fetchSingleMovie(this.props.id)\n    .then(singleMovie => this.setState({ singleMovie: singleMovie.movie }))\n    .then(() => this.getUserRatings())\n    .catch(error => this.setState({ error: error.message}))\n  }\n\n  componentDidUpdate(prevProps) {\n    window.scrollTo(0, 0)\n    if(prevProps.currentUser !== this.props.currentUser) {\n      this.setState({ currentUserRating: null, error: \"\" })\n      this.getUserRatings()\n    }\n  }\n\n  setStarRating = (rating) => {\n    let ratingId;\n    let userId;\n    \n    if (this.props.currentUser && this.state.currentUserRating) {\n      ratingId = this.state.currentUserRating.id\n      userId = this.props.currentUser.id\n\n      deleteUserRating(userId, ratingId)\n      .then(response => console.log('delete response', response))\n      .catch(error => this.setState({ error: error.message }))\n\n      this.createNewRating(userId, rating)\n\n    } else if (this.props.currentUser) {\n      userId = this.props.currentUser.id\n\n      this.createNewRating(userId, rating)\n    }\n  }\n\n  createNewRating = (userId, rating) => {\n    const newRating = {\n      movie_id: this.state.singleMovie.id,\n      rating: +rating\n    }\n    \n    console.log('newRating obj', newRating)\n    \n    postUserRating(userId, newRating)\n    .then(() => this.updateUserRating())\n    .catch(error => this.setState({ error: error.message }))\n  }\n\n  getUserRatings() {\n    this.setState({ formattedRating: this.state.singleMovie.average_rating.toFixed(1)})\n   \n    if (this.props.currentUser) {\n      this.updateUserRating()\n    }\n  }\n\n  updateUserRating = () => {\n    fetchUserRatings(this.props.currentUser.id)\n    .then(ratings => { \n      console.log('allratings', ratings)\n      const userRating = ratings.ratings.find(rating => {\n        return rating.movie_id === this.state.singleMovie.id\n      })\n      console.log('userRating', userRating)\n      this.setState({ currentUserRating: userRating })\n    })\n    .catch(error => this.setState({ error: error.message}))  \n  }\n\n  formatGenres = () => {\n    if (!this.state.singleMovie.genres) {\n      return <p className=\"unavailable-genres\">Unavailable</p>\n    } else if (this.state.singleMovie.genres.length > 1) {\n      let commaList = this.state.singleMovie.genres.map(genre => {\n        return(\n          <p key={Math.random()} className=\"genre\">{genre}</p>\n        )\n      })\n      return commaList;\n    } else {\n      return <p className=\"genre\">{this.state.singleMovie.genres[0]}</p>;\n    }\n  }\n\n  generateListItem() {\n    return (\n      <section>\n        <ListItem \n          key={Math.random()}\n          label=\"Release Date\"\n          body={new Date(this.state.singleMovie.release_date).toLocaleDateString()}\n        />\n        <ListItem \n          key={Math.random()}\n          label=\"Runtime\"\n          body={`${this.state.singleMovie.runtime} mins`}\n        />\n        <ListItem \n          key={Math.random()}\n          label=\"Budget\"\n          body={`$${new Intl.NumberFormat(\"en-US\").format(this.state.singleMovie.budget)}`}\n        />\n        <ListItem \n          key={Math.random()}\n          label=\"Revenue\"\n          body={`$${new Intl.NumberFormat(\"en-US\").format(this.state.singleMovie.revenue)}`}\n        />\n      </section>\n    )\n  }\n\n  toggleWatchlist = () => {\n    if (this.state.onWatchlist === false) {\n      this.setState({ onWatchlist: true })\n    } else {\n      this.setState({ onWatchlist: false})\n    }\n  }\n\n\n  render() {\n    return(\n      <section className=\"movie-details\">\n        <section className=\"banner-container\">\n          <img src={this.state.singleMovie.backdrop_path} className=\"banner-img\"/>\n        </section>\n        <section className=\"movie-info\">\n          <section className=\"movie-aside\">\n            <img src={this.state.singleMovie.poster_path} className=\"poster-img\" />\n            {this.generateListItem()}\n          </section>\n          <section className=\"movie-main\">\n            <section className=\"backdrop-overlay\"> \n              <section className=\"responsive-poster\">\n                <img src={this.state.singleMovie.poster_path} className=\"poster-img\" />\n              </section>\n              <section className=\"main-header-details\">\n                <h1 className=\"title\">{this.state.singleMovie.title}</h1>\n                <p className=\"tagline\">{this.state.singleMovie.tagline}</p>\n                <p className=\"rating\">\n                  <span className=\"rating-star\">☆ {this.state.formattedRating}</span>/10\n                </p>\n                <section className=\"genre-list\">\n                  {this.formatGenres()}\n                </section>\n              </section>  \n            </section>\n            <section className=\"overview-box\">\n              <section className=\"rating-watchlist\">\n                <StarRating \n                  currentUser={this.props.currentUser}\n                  currentUserRating={!this.state.currentUserRating ? 0 : this.state.currentUserRating.rating}\n                  canEdit={!this.props.currentUser ? false : true} \n                  setStarRating={this.setStarRating}\n                />\n                {this.state.onWatchlist === true && <button className=\"on-watchlist-button\" onClick={() => this.toggleWatchlist()}>On Watchlist</button>}\n                {this.state.onWatchlist === false && <button className=\"add-watchlist-button\" onClick={() => this.toggleWatchlist()}>+ Add to Watchlist</button>}\n              </section>\n\n              {/* Responsive genres list */}\n              <section className=\"responsive-genre-list\">\n                  {this.formatGenres()}\n              </section>\n              \n              <h3>Synopsis</h3>\n              <p className=\"overview\">{this.state.singleMovie.overview}</p>\n              <section className=\"responsive-list\">\n                {this.generateListItem()}\n              </section>\n            </section>\n            <section className=\"trailer-box\">\n              <h3 className=\"trailer-header\">Trailers</h3>\n              <MovieTrailers \n                id={this.props.id} \n              />\n            </section>\n          </section>\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default MovieDetails;","/Users/karacaputo/turing/personal-projects/underrated/src/Banner/Banner.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/Search/Search.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/Watchlist/Watchlist.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/StarRating/StarRating.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/Login/Login.js",["69"],"import React, { Component } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Login.scss';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: ''\n    }\n  }\n\n  handleClick(event) {\n    event.preventDefault()\n  }\n\n  handleChange(event) {\n    this.props.clearError()\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  determineError = () => {\n    if (this.props.error) {\n      return (\n        <section>\n          <p>{this.props.error}</p>\n        </section>\n      )\n    }\n  }\n\n  submitLogin = () => {\n    this.props.validateLogin(this.state.email, this.state.password);\n    this.clearInputs()\n  }\n\n  clearInputs = () => {\n    this.setState({ email: '', password: '' })\n  }\n\n  render() {\n    return(\n      <section id='login-main'>\n        <input\n          name='email'\n          type='text'\n          placeholder='Email'\n          className='login-input'\n          value={this.state.email}\n          onClick={(event) => this.handleClick(event)}\n          onChange={(event) => this.handleChange(event)}\n        />\n        <input\n          name='password'\n          type='password'\n          placeholder='Password'\n          value={this.state.password}\n          onClick={(event) => this.handleClick(event)}\n          onChange={(event) => this.handleChange(event)}\n        />\n        {this.determineError()}\n        <button \n          id='submit-button' \n          onClick={this.submitLogin}>\n          SUBMIT\n        </button>\n      </section>\n    )\n  }\n}\n\nexport default Login;","/Users/karacaputo/turing/personal-projects/underrated/src/Poster/Poster.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/ListItem/ListItem.js",[],"/Users/karacaputo/turing/personal-projects/underrated/src/MovieTrailers/MovieTrailers.js",["70"],"import React, { Component } from 'react';\nimport { fetchMovieTrailers } from '../apiCalls';\nimport { Carousel } from 'react-responsive-carousel';\nimport ReactPlayer from 'react-player';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"\nimport './MovieTrailers.scss';\n\nclass MovieTrailers extends Component {\n  constructor() {\n    super();\n    this.state = {\n      trailers: [],\n      error: ''\n    }\n  } \n\n  componentDidMount() {\n    fetchMovieTrailers(this.props.id)\n    .then(movieTrailers => this.setState({ trailers: movieTrailers.videos }))\n    .catch(error => this.setState({ error: error.message }))\n  }\n\n  determineAvailableTrailers = () => {\n    return this.state.trailers.find(trailer => {\n      return trailer.site === \"YouTube\"\n    })\n  }\n  \n  formatTrailers = () => {\n    return this.state.trailers.map(trailer => {\n      if(trailer.site === \"YouTube\") {\n        return (\n          <ReactPlayer \n            key={trailer.id}\n            url={`https://www.youtube.com/watch?v=${trailer.key}`}\n          />  \n        )  \n      }\n    })\n  }\n\n  render() {\n    return(\n      <section className=\"trailers\">\n        {this.determineAvailableTrailers() &&\n          <Carousel\n            showThumbs={false}\n          >\n            {this.formatTrailers()}\n          </Carousel>  \n        }\n        {!this.determineAvailableTrailers() &&\n          <p>Sorry, no available trailers for this movie.</p>\n        }\n      </section>\n    )\n  }\n}\n\nexport default MovieTrailers;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":34,"column":33,"nodeType":"77","messageId":"78","endLine":34,"endColumn":35},{"ruleId":"79","severity":1,"message":"80","line":145,"column":11,"nodeType":"81","endLine":145,"endColumn":83},{"ruleId":"79","severity":1,"message":"80","line":149,"column":13,"nodeType":"81","endLine":149,"endColumn":84},{"ruleId":"79","severity":1,"message":"80","line":155,"column":17,"nodeType":"81","endLine":155,"endColumn":88},{"ruleId":"82","severity":1,"message":"83","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":16},{"ruleId":"75","severity":1,"message":"86","line":30,"column":44,"nodeType":"77","messageId":"87","endLine":30,"endColumn":46},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation"]